#!/bin/sh

. /lib/functions/network.sh
. /usr/lib/bwmon-gargoyle/functions.sh
. /usr/lib/gargoyle_firewall_util/gargoyle_firewall_util.sh

backup_script_dir="/tmp/bw_backup"
backup_script="$backup_script_dir/do_wireguard_bw_backup.sh"
tmp_cron="/tmp/tmp.wireguard.cron"

minute_s=60
hour_s=3600
day_s=86400

#high res intervals
hr1_interval=2
hr1_num_intervals=449
hr1_reset_time=2
	
hr2_interval="minute"
hr2_num_intervals=359
	
hr3_interval=$((3*$minute_s))
hr3_num_intervals=479
hr3_reset_time=$((3*$minute_s))
	
hr4_interval=$((2*$hour_s))
hr4_num_intervals=359
hr4_reset_time=$((2*$hour_s))

hr5_interval="day"
hr5_num_intervals=365

#low res intervals
lr1_interval="minute"
lr1_num_intervals=15

lr2_interval=$((15*$minute_s))
lr2_num_intervals=24
lr2_reset_time=$((15*$minute_s))
	
lr3_interval="hour"
lr3_num_intervals=24

lr4_interval="day"
lr4_num_intervals=31

lr5_interval="month"
lr5_num_intervals=12


mon_nums="1 2 3 4 5"
bw_ids=""

setup()
{
	server_enabled=$( uci get wireguard_gargoyle.server.enabled 2>/dev/null )
	client_enabled=$( uci get wireguard_gargoyle.client.enabled 2>/dev/null )
	bwmonenabled="$(uci -q get bwmon_gargoyle.global.enabled)"
	if [ "$server_enabled" == "1" ] || [ "$client_enabled" == "1" ] ; then
		[ "$server_enabled" == "1" ] && wireguard_port=$( uci get wireguard_gargoyle.server.port 2>/dev/null )
		[ "$client_enabled" == "1" ] && wireguard_port=$( uci get wireguard_gargoyle.client.server_port 2>/dev/null )

		network_get_device wan_if wan || \
			wan_if=$(uci -q get network.wan.ifname)
		wg_if=$(uci -q get firewall.wg_zone.device)
		if [ -n "$wireguard_port" ] && [ -n "$wan_if" ] && [ -n "$wg_if" ]  ; then
			if [ "$bwmonenabled" = "1" ] ; then
				# create wireguard bandwidth monitor chains
				iptables -t mangle -N wireguard_down_bw
				iptables -t mangle -N wireguard_up_bw

				# add monitoring rules
				for n in $mon_nums ; do
					for res in "hr" "lr" ; do
						interval=$(eval "echo \$$res"$n"_interval")
						num_intervals=$(eval "echo \$$res"$n"_num_intervals")
						reset_time=$(eval "echo \$$res"$n"_reset_time")
						if [ -n "$reset_time" ] ; then reset_time="--reset_time $reset_time" ; fi
						iptables -t mangle -A wireguard_down_bw  -m bandwidth --id "wireguard-$res$n-download-$interval-$num_intervals" --reset_interval $interval --intervals_to_save $num_intervals $reset_time
						iptables -t mangle -A wireguard_up_bw    -m bandwidth --id "wireguard-$res$n-upload-$interval-$num_intervals"   --reset_interval $interval --intervals_to_save $num_intervals $reset_time
					
						next_ids="wireguard-$res$n-download-$interval-$num_intervals wireguard-$res$n-upload-$interval-$num_intervals"
						if [ -z "$bw_ids" ] ; then bw_ids="$next_ids" ; else bw_ids="$bw_ids $next_ids" ; fi
					done
				done

				iptables -t mangle -I FORWARD -i "$wan_if" -o "$wg_if" -j wireguard_down_bw
				iptables -t mangle -I FORWARD -i "$wg_if" -o "$wan_if" -j wireguard_up_bw
			
				if [ "$server_enabled" == "1" ] ; then
					iptables -t mangle -A INPUT  -i "$wg_if" -p udp --dport "$wireguard_port" -j wireguard_down_bw
					iptables -t mangle -A OUTPUT -o "$wan_if" -p udp --sport "$wireguard_port" -j wireguard_up_bw
				else
					iptables -t mangle -A INPUT  -i "$wg_if" -p udp --sport "$wireguard_port" -j wireguard_down_bw
					iptables -t mangle -A OUTPUT -o "$wan_if" -p udp --dport "$wireguard_port" -j wireguard_up_bw
				fi
		
		
				# enable backups of bandwidth data 
				touch /etc/crontabs/root
				grep -v "$backup_script" /etc/crontabs/root  > "$tmp_cron"
				echo "0 0,4,8,12,16,20 * * * $backup_script" >> "$tmp_cron"

				mkdir -p "$backup_script_dir"
				echo "#!/bin/sh" > "$backup_script"
				chmod 700 "$backup_script"
		
	
				for i in $bw_ids ; do
					is_hr123=$(echo "$i" | egrep "\-hr\-[123]")
					is_lr123=$(echo "$i" | egrep "\-lr\-[123]")
					if [ -n "$is_hr123" ] || [ -n "$is_lr123" ]   ; then
						bw_restore "$i" 1
					else
						bw_restore "$i" 0
					fi
				done
		
				update_cron
			else
				# disable backups of bandwidth data 
				touch /etc/crontabs/root
				grep -v "$backup_script" /etc/crontabs/root  > "$tmp_cron"
				update_cron
			fi
		fi
	fi
}

teardown()
{
	touch /etc/crontabs/root

	if [ -e "$backup_script" ] ; then
		sh "$backup_script" 2>/dev/null
		rm -rf "$backup_script"
	fi

	grep -v "$backup_script" /etc/crontabs/root | grep -v /usr/sbin/update_wireguard_ipset > "$tmp_cron"
	update_cron

	delete_chain_from_table mangle wireguard_down_bw
	delete_chain_from_table mangle wireguard_up_bw
}

RUN_MODE="$1"

if [ "$RUN_MODE" != "start" ] && [ "$RUN_MODE" != "stop" ] && [ "$RUN_MODE" != "restart" ] ; then
	RUN_MODE="restart"
fi

if [ "$RUN_MODE" = "start" ] || [ "$RUN_MODE" = "restart" ] ; then
	teardown
	setup
elif [ "$RUN_MODE" = "stop" ] ; then
	teardown
fi
