#!/bin/sh

. /lib/functions/network.sh
. /usr/lib/bwmon-gargoyle/functions.sh

bwmonscript="/usr/lib/bwmon-gargoyle/bwmon-gargoyle.d/050-tor.bwmon"

if [ -f /tmp/tor.firewall.running ] ; then
	exit
fi
touch /tmp/tor.firewall.running

clear_chains()
{
	delete_chain_from_table nat    tor_client
	delete_chain_from_table filter tor_client
	delete_chain_from_table filter tor_relay
}

initialize()
{
	enabled=$( uci get tor.global.enabled 2>/dev/null )
	client_mode=$( uci get tor.client.client_mode 2>/dev/null )
	relay_mode=$( uci get tor.relay.relay_mode 2>/dev/null )
	mem_disabled=$( uci get tor.global.disabled_due_to_memory 2>/dev/null )
	if  [ "$mem_disabled" = "1" ] ; then
		sleep 3
		enabled=$( uci get tor.global.enabled 2>/dev/null )
	fi
	
	if [ -z "$enabled" ] ; then
		enabled = "0"
	fi
	
	if [ "$enabled" != "0" ] && [ "$client_mode" != "0" ] ; then
		
	
		enabled_ip_file=$( uci get tor.client.enabled_ip_file 2>/dev/null)
		dns_port=$( uci get tor.client.dns_port 2>/dev/null )
		trans_port=$( uci get tor.client.trans_port 2>/dev/null )
		zone=$( uci get tor.client.zone 2>/dev/null )
		block_unsupported_proto=$( uci get tor.client.block_unsupported_proto 2>/dev/null )
		if [ -z "$zone" ] ; then 
			zone="lan"
		fi
		network_get_ipaddr zone_ip "$zone"
		network_get_subnet zone_mask "$zone"
		
		hidden_service_subnet=$( uci get tor.client.hidden_service_subnet 2>/dev/null )
		hidden_service_mask_bits=$( uci get tor.client.hidden_service_mask_bits 2>/dev/null )
		if [ -z "$hidden_service_subnet" ] || [ -z "$hidden_service_mask_bits" ] ; then
			hidden_service_subnet="10.192.0.0"
			hidden_service_mask_bits="12"
			uci set tor.client.hidden_service_subnet="$hidden_service_subnet"
			uci set tor.client.hidden_service_mask_bits="$hidden_service_mask_bits"
			uci commit
		fi
	
	
		# setup client mode firewall rules
		iptables -t nat    -N tor_client
		iptables -t filter -N tor_client
		ip6tables -t filter -N tor_client

		if [ "$client_mode" = "3" ] || [ "$client_mode" = "2" ] ; then
			#iptables -t nat -A tor_client -p udp --dport 53  -m string --hex-string '|056f6e696f6e00|' --algo bm -j REDIRECT --to-ports $dns_port
			#iptables -t nat -A tor_client -p tcp --dport 53  -m string --hex-string '|056f6e696f6e00|' --algo bm -j REDIRECT --to-ports $dns_port
			
			uci del_list dhcp.@dnsmasq[0].rebind_domain='.onion'			
			cur_onion_server=$( uci get dhcp.@dnsmasq[0].server | grep -o "\/.onion\/[0-9\.#]*" )
			network_get_ipaddr client_listen_ip "$zone"
			if [ -n "$cur_onion_server" ] ; then
				uci del_list dhcp.@dnsmasq[0].server="$cur_onion_server"
			fi
			uci add_list dhcp.@dnsmasq[0].rebind_domain='.onion'
			uci add_list dhcp.@dnsmasq[0].server="/.onion/$client_listen_ip#$dns_port"
			uci commit
			/etc/init.d/dnsmasq restart
			

			iptables -t nat -A tor_client -p tcp ! --dport 53 -d $hidden_service_subnet/$hidden_service_mask_bits  -j REDIRECT --to-ports $trans_port 
		fi

		test_tor_active=""
		if [ "$client_mode" = "2" ] ; then
		
			if [ -n "$enabled_ip_file" ] ; then
				touch "$enabled_ip_file" 
			fi
		
			ipset --destroy tor_active_ips >/dev/null 2>&1
			ipset --create  tor_active_ips iphash
			for ip in $(cat $enabled_ip_file) ; do ipset --add tor_active_ips $ip ; done
			
			iptables -t nat -A tor_client -m set ! --match-set tor_active_ips src -j RETURN
			test_tor_active=" -m set --match-set tor_active_ips src "
		fi
	
	
	
		if [ "$client_mode" = "1" ] || [ "$client_mode" = "2" ] ; then
	
			# dns rules
			iptables -t nat -A tor_client -p udp   --dport 53 -j REDIRECT --to-ports $dns_port
			iptables -t nat -A tor_client -p tcp   --dport 53 -j REDIRECT --to-ports $dns_port
		
			# don't redirect local addresses
			if [ -n "$zone_mask" ] ; then
				iptables -t nat    -A tor_client -d $zone_mask -j RETURN
				iptables -t filter -A tor_client -d $zone_mask -j RETURN
			elif [ -n "$zone_ip" ] ; then
				iptables -t nat    -A tor_client -d $zone_ip -j RETURN
				iptables -t filter -A tor_client -d $zone_ip -j RETURN
			fi
			
			# redirect to tor transparent proxy
			iptables -t nat -A tor_client -p tcp ! --dport 53 -j REDIRECT --to-ports $trans_port 
		
			# block udp/icmp if requested
			if [ "$block_unsupported_proto" = "1" ] ; then
				iptables -t filter -A tor_client -p tcp            -j RETURN 
				iptables -t filter -A tor_client -p udp --dport 53 -j RETURN
				iptables -t filter -A tor_client -j REJECT
				iptables -t filter -I zone_${zone}_forward $test_tor_active -j tor_client
			fi

			# block ipv6 for all hosts (yes, even in mode 2) to prevent leakage
			ip6tables -t filter -A tor_client -p tcp -j REJECT --reject-with tcp-reset
			ip6tables -t filter -A tor_client -j REJECT
			ip6tables -t filter -A forwarding_rule -j tor_client
			# block ipv6 dns
			ip6tables -t filter -A output_rule -p tcp --dport 53 -j tor_client
			ip6tables -t filter -A output_rule -p udp --dport 53 -j tor_client
			ip6tables -t filter -A input_rule -p tcp --dport 53 -j tor_client
			ip6tables -t filter -A input_rule -p udp --dport 53 -j tor_client
		fi
		iptables -t nat -I zone_${zone}_prerouting -j tor_client
		
	fi
	
	
	
	if [ "$enabled" != "0" ]  && [ "$relay_mode" != "0" ] ; then
		relay_zone=$(uci get tor.relay.zone)
		relay_port=$(uci get tor.relay.relay_port)
		obfsproxy_port=$(uci get tor.relay.obfsproxy_port)
	
		iptables -t filter -N tor_relay
		iptables -t filter -I tor_relay -p tcp --dport $relay_port -j ACCEPT
		ip6tables -t filter -N tor_relay
		ip6tables -t filter -I tor_relay -p tcp --dport $relay_port -j ACCEPT
		if [ "$relay_mode" = "1" ] && [ -n "$obfsproxy_port" ] && [ "$obfsproxy_port" != "0" ] ; then
			iptables -t filter -I tor_relay -p tcp --dport $obfsproxy_port -j ACCEPT
			#ip6tables -t filter -I tor_relay -p tcp --dport $obfsproxy_port -j ACCEPT
		fi
		iptables -t filter -I input_${relay_zone}_rule -j tor_relay
		ip6tables -t filter -I input_${relay_zone}_rule -j tor_relay
	fi
	
	if [ "$enabled" != "0" ]  && [ "$relay_mode$client_mode" != "00" ] ; then
		# enable rebuilding tor_relays ipset
		touch /etc/crontabs/root
		grep -v /usr/sbin/update_tor_ipset > "$tmp_cron"
		echo "* * * * * /usr/sbin/update_tor_ipset" >> "$tmp_cron"
	
		update_cron
		
		[ -e $bwmonscript ] && $bwmonscript "start"
	fi
}

shutdown()
{
	touch /etc/crontabs/root

	grep -v /usr/sbin/update_tor_ipset > "$tmp_cron"
	update_cron

	clear_chains
	
	[ -e $bwmonscript ] && $bwmonscript "stop"
}


RUN_MODE="$1"


if [ "$RUN_MODE" != "start" ] && [ "$RUN_MODE" != "stop" ] && [ "$RUN_MODE" != "restart" ] ; then
	RUN_MODE="restart"
fi

if [ "$RUN_MODE" = "start" ] || [ "$RUN_MODE" = "restart" ] ; then
	shutdown
	initialize
elif [ "$RUN_MODE" = "stop" ] ; then
	shutdown
fi

rm /tmp/tor.firewall.running

