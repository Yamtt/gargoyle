#!/bin/sh

. /lib/functions/network.sh
. /usr/lib/bwmon-gargoyle/functions.sh
. /usr/lib/gargoyle_firewall_util/gargoyle_firewall_util.sh

# constants for tor bandwidth monitoring rules

backup_script_dir="/tmp/bw_backup"
backup_script="$backup_script_dir/do_tor_bw_backup.sh"
tmp_cron="/tmp/tmp.tor.cron"


minute_s=60
hour_s=3600
day_s=86400

#high res intervals
hr1_interval=2
hr1_num_intervals=449
hr1_reset_time=2
	
hr2_interval="minute"
hr2_num_intervals=359
	
hr3_interval=$((3*$minute_s))
hr3_num_intervals=479
hr3_reset_time=$((3*$minute_s))
	
hr4_interval=$((2*$hour_s))
hr4_num_intervals=359
hr4_reset_time=$((2*$hour_s))

hr5_interval="day"
hr5_num_intervals=365

#low res intervals
lr1_interval="minute"
lr1_num_intervals=15

lr2_interval=$((15*$minute_s))
lr2_num_intervals=24
lr2_reset_time=$((15*$minute_s))
	
lr3_interval="hour"
lr3_num_intervals=24

lr4_interval="day"
lr4_num_intervals=31

lr5_interval="month"
lr5_num_intervals=12


mon_nums="1 2 3 4 5"
bw_ids=""


setup()
{
	enabled=$( uci get tor.global.enabled 2>/dev/null )
	client_mode=$( uci get tor.client.client_mode 2>/dev/null )
	relay_mode=$( uci get tor.relay.relay_mode 2>/dev/null )
	mem_disabled=$( uci get tor.global.disabled_due_to_memory 2>/dev/null )
	if  [ "$mem_disabled" = "1" ] ; then
		sleep 3
		enabled=$( uci get tor.global.enabled 2>/dev/null )
	fi
	
	if [ -z "$enabled" ] ; then
		enabled = "0"
	fi
	
	if [ "$enabled" != "0" ]  && [ "$relay_mode$client_mode" != "00" ] ; then
		network_get_device wan_if wan
		if [ -z "$wan_if" ] ; then
			network_get_physdev wan_if wan
		fi
		if [ -n "$wan_if" ] ; then
			
			# create tor bandwidth monitor chains
			nft add chain inet fw4 mangle_tor_down_bw
			nft add chain inet fw4 mangle_tor_up_bw

			# first, test if traffic is tor, otherwise return
			# traffic is tor if it's to/from the router itself AND
			# either to the ORPort/obfsproxy port OR to/from an IP that is a known relay
			# an nftset of known relays, "tor_relays" is built by the /usr/sbin/tor_ipset command
			/usr/sbin/update_tor_nftset
			relay_port=$(uci get tor.relay.relay_port)
			obfsproxy_port=$(uci get tor.relay.obfsproxy_port)
			oport=""
			rport=""
			comma=""
			if [ "$relay_mode" != "0" ] ; then rport="$relay_port" ; fi
			if [ "$relay_mode" = "1" ] && [ -n "$obfsproxy_port" ] && [ "$obfsproxy_port" != "0" ] ; then
				oport="$obfsproxy_port"
				[ -n "$rport" ] && comma=","
			fi

			nft add rule inet fw4 mangle_tor_down_bw tcp dport \{ $rport$comma$oport \} ct mark set ct mark \& 0x0FFFFFFF \| 0xF0000000
			nft add rule inet fw4 mangle_tor_down_bw ip saddr @tor_relays ct mark set ct mark \& 0x0FFFFFFF \| 0xF0000000
			nft add rule inet fw4 mangle_tor_up_bw ip daddr @tor_relays ct mark set ct mark \& 0x0FFFFFFF \| 0xF0000000
			nft add rule inet fw4 mangle_tor_down_bw ct mark \& 0xF0000000 != 0xF0000000 return
			nft add rule inet fw4 mangle_tor_up_bw ct mark \& 0xF0000000 != 0xF0000000 return


			# add monitoring rules
			for n in $mon_nums ; do
				for res in "hr" "lr" ; do
					interval=$(eval "echo \$$res"$n"_interval")
					num_intervals=$(eval "echo \$$res"$n"_num_intervals")
					reset_time=$(eval "echo \$$res"$n"_reset_time")
					if [ -n "$reset_time" ] ; then reset_time="reset-time $reset_time" ; fi
	
					nft add rule inet fw4 mangle_tor_down_bw bandwidth id \""tor-$res$n-download-$interval-$num_intervals"\" reset-interval $interval intervals-to-save $num_intervals $reset_time
					nft add rule inet fw4 mangle_tor_up_bw bandwidth id \""tor-$res$n-upload-$interval-$num_intervals"\" reset-interval $interval intervals-to-save $num_intervals $reset_time
					
					next_ids="tor-$res$n-download-$interval-$num_intervals tor-$res$n-upload-$interval-$num_intervals"
					if [ -z "$bw_ids" ] ; then bw_ids="$next_ids" ; else bw_ids="$bw_ids $next_ids" ; fi
				done
			done


			#clear connmark we set
			nft add rule inet fw4 mangle_tor_down_bw ct mark set ct mark \& 0x0FFFFFFF \| 0x0
			nft add rule inet fw4 mangle_tor_up_bw ct mark set ct mark \& 0x0FFFFFFF \| 0x0


			# create rules to jump to tor bandwidth chain
			nft add rule inet fw4 mangle_input iifname $wan_if meta l4proto tcp jump mangle_tor_down_bw
			nft add rule inet fw4 mangle_output oifname $wan_if meta l4proto tcp jump mangle_tor_down_bw

		
			# enable backups of bandwidth data
			touch /etc/crontabs/root
			grep -v "$backup_script" /etc/crontabs/root > "$tmp_cron"
			echo "0 0,4,8,12,16,20 * * * $backup_script" >> "$tmp_cron"

		
			mkdir -p "$backup_script_dir"
			echo "#!/bin/sh" > "$backup_script"
			chmod 700 "$backup_script"
		
	
			for i in $bw_ids ; do
				is_hr123=$(echo "$i" | egrep "\-hr\-[123]")
				is_lr123=$(echo "$i" | egrep "\-lr\-[123]")
				if [ -n "$is_hr123" ] || [ -n "$is_lr123" ]   ; then
					bw_restore "$i" 1
				else
					bw_restore "$i" 0
				fi
			done
		
			update_cron
		fi
	fi
}

teardown()
{
	touch /etc/crontabs/root

	if [ -e "$backup_script" ] ; then
		sh "$backup_script" 2>/dev/null
		rm -rf "$backup_script"
	fi

	grep -v "$backup_script" /etc/crontabs/root > "$tmp_cron"
	update_cron
	
	delete_chain_from_table inet fw4 mangle_tor_down_bw
	delete_chain_from_table inet fw4 mangle_tor_up_bw
}

RUN_MODE="$1"

if [ "$RUN_MODE" != "start" ] && [ "$RUN_MODE" != "stop" ] && [ "$RUN_MODE" != "restart" ] ; then
	RUN_MODE="restart"
fi

if [ "$RUN_MODE" = "start" ] || [ "$RUN_MODE" = "restart" ] ; then
	teardown
	setup
elif [ "$RUN_MODE" = "stop" ] ; then
	teardown
fi
